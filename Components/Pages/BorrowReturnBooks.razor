@page "/Borrow/Return"
@using LibraryManagement.Data

<div class="container">
    <div class="header">
        <h1>📚 Borrow and Return Books</h1>
        <p>Manage your library effectively by adding members, books, and tracking borrowed items.</p>
    </div>

    <div class="content">
        <!-- Add Member  Section -->
        <div class="card card-cream">
            <h2>Add a Member</h2>
            <form>
                <input type="text" placeholder="First Name" @bind="firstName" />
                <input type="text" placeholder="Last Name" @bind="lastName" />
                <button type="button" class="btn btn-primary" @onclick="AddMember">Add Member</button>
            </form>
        </div>

        <!-- Borrow Section -->
        <div class="card card-cream">
            <h2>Borrow a Book</h2>
            <form>
                <select @bind="selectedMemberId">
                    <option value="">-- Select Member -- </option>
                    @foreach (Member member in members)
                    {
                        <option value="@member.MemberID">@member.FirstName @member.LastName</option>
                    }
                </select>
                <select @bind="selectedBookId">
                    <option value="">-- Select Book --</option>
                    @foreach (var book in books)
                    {
                        <option value="@book.BookId">@book.Title</option>
                    }
                </select>
                <input type="date" @bind="BorrowDate" />
                <input type="date" @bind="DueDate" />
                <button type="button" class="btn btn-primary" @onclick="BorrowBook">Borrow Book</button>
            </form>
        </div>

        <!-- Return Section -->
        <div class="card card-cream">
            <h2>Return a Book</h2>
            <form>
                <input type="text" placeholder="Search by Member or Book Name" @bind="searchQuery" />
                <button type="button" class="btn btn-primary" @onclick="SearchBorrowedBooks">Search</button>

                <ul>
                    @if (borrowedBooks.Any())
                    {
                        @foreach (var borrowed in borrowedBooks)
                        {
                            <li>
                                <span>@borrowed.MemberName borrowed "<strong>@borrowed.BookName</strong>" (Due: @borrowed.DueDate.ToShortDateString())</span>
                                <button type="button" class="btn btn-danger" @onclick="() => ReturnBook(borrowed.Id)">Return</button>
                            </li>
                        }
                    }
                    else
                    {
                        <li>No borrowed books found.</li>
                    }
                </ul>
            </form>
        </div>
    </div>
</div>

@code {
    static DbManager db = new DbManager();
    List<Member> members = db.GetMembers();
    List<Book> books = db.GetBooks();
    List<BorrowedBook> borrowedBooks = db.GetBorrowedBooks();

    string firstName = string.Empty;
    string lastName  = string.Empty;
    string searchQuery = string.Empty;
    int selectedMemberId;
    int selectedBookId;

    DateTime BorrowDate = DateTime.Now;
    DateTime DueDate  = DateTime.Now.AddDays(14);

    private void AddMember()
    {
        if (!string.IsNullOrWhiteSpace(firstName) && !string.IsNullOrWhiteSpace(lastName))
        {
            Member newMember = new Member(firstName, lastName);
            members.Add(newMember);
            db.AddNewMember(newMember);
            firstName = string.Empty;
            lastName = string.Empty;
        }
    }

    private void BorrowBook()
    {
        var member = members.FirstOrDefault(m => m.MemberID == selectedMemberId);
        var book = books.FirstOrDefault(b => b.BookId == selectedBookId);

        if (member != null && book != null)
        {
            BorrowedBook borrowedBook = new BorrowedBook(selectedBookId, selectedMemberId, BorrowDate, DueDate);
            borrowedBooks.Add(borrowedBook);
            db.BorrowBook(borrowedBook);
            borrowedBooks = db.GetBorrowedBooks();
        }
    }

    private void SearchBorrowedBooks()
    {
        throw new NotImplementedException();
    }

    private void ReturnBook(int borrowedBookId)
    {
        // throw new NotImplementedException();
        var borrowedBook = borrowedBooks.FirstOrDefault(b => b.Id == borrowedBookId);
        if (borrowedBook != null)
        {
            db.ReturnBook(borrowedBook);
            borrowedBooks.Remove(borrowedBook);
        }
    }
}

<style>
    body {
        margin: 0;
        font-family: Arial, sans-serif;
        background: linear-gradient(to bottom, #1e1e1e, #2a2a2a);
        color: #e0e0e0;
    }

    .header {
        text-align: center;
        padding: 2rem 1rem;
        background: #343a40;
        color: white;
        border-radius: 10px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        margin-bottom: 2rem;
    }

        .header h1 {
            font-size: 2.5rem;
            margin: 0;
            font-weight: bold;
        }

        .header p {
            font-size: 1.2rem;
            margin-top: 0.5rem;
            font-weight: 300;
            opacity: 0.9;
        }

    .card {
        background: #f5f5dc;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        margin-bottom: 20px;
        color: #000000;
    }

        .card h2 {
            font-size: 1.5rem;
            margin-bottom: 20px;
            color: #000000;
        }

    form {
        display: flex;
        flex-direction: column;
        gap: 20px;
    }

    input {
        width: 100%;
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 5px;
        background-color: #ffffff;
        color: #000000;
    }

        input:focus {
            outline: none;
            border-color: #007bff;
            box-shadow: 0 0 6px rgba(52, 152, 219, 0.6);
        }

    .btn {
        padding: 10px 15px;
        font-size: 1rem;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        transition: transform 0.2s ease, background-color 0.3s ease;
    }

    .btn-primary {
        background-color: #007bff;
        color: white;
    }

        .btn-primary:hover {
            background-color: #0056b3;
        }

    ul {
        list-style: none;
        padding: 0;
    }

    li {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 5px;
        margin-bottom: 10px;
        background-color: #ffffff;
        color: #000000;
    }
</style>
